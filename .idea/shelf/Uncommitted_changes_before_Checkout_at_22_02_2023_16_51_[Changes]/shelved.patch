Index: src/Form/FormHandler/ContactFormHandler.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Form/FormHandler/ContactFormHandler.php b/src/Form/FormHandler/ContactFormHandler.php
new file mode 100644
--- /dev/null	(date 1677064444711)
+++ b/src/Form/FormHandler/ContactFormHandler.php	(date 1677064444711)
@@ -0,0 +1,19 @@
+<?php
+
+namespace App\Form\FormHandler;
+
+use App\Entity\Contact;
+use Doctrine\ORM\EntityManagerInterface;
+
+final class ContactFormHandler
+{
+    public function __construct(
+        public EntityManagerInterface $entityManager
+    ) {}
+    public function handleForm(Contact $contact): void
+    {
+        $this->entityManager->persist($contact);
+        $this->entityManager->flush();
+        dd($contact);
+    }
+}
Index: src/Form/ContactType.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Form/ContactType.php b/src/Form/ContactType.php
new file mode 100644
--- /dev/null	(date 1677064444711)
+++ b/src/Form/ContactType.php	(date 1677064444711)
@@ -0,0 +1,90 @@
+<?php
+
+namespace App\Form;
+
+use App\Entity\Contact;
+use Symfony\Component\Form\AbstractType;
+use Symfony\Component\Form\Extension\Core\Type\EmailType;
+use Symfony\Component\Form\Extension\Core\Type\SubmitType;
+use Symfony\Component\Form\Extension\Core\Type\TextareaType;
+use Symfony\Component\Form\Extension\Core\Type\TextType;
+use Symfony\Component\Form\FormBuilderInterface;
+use Symfony\Component\OptionsResolver\OptionsResolver;
+
+use Symfony\Component\Validator\Constraints as Assert;
+
+class ContactType extends AbstractType
+{
+    public function buildForm(FormBuilderInterface $builder, array $options): void
+    {
+        $builder
+            ->add('fullName', TextType::class, [
+                'attr' => [
+                    'class' => 'form-control',
+                    'minlength' => '2',
+                    'maxlength' => '50',
+                ],
+                'label' => 'Nom',
+                'label_attr' => [
+                    'class' => 'form-label'
+                ],
+            ])
+            ->add('email', EmailType::class, [
+                'attr' => [
+                    'class' => 'form-control',
+                    'minlength' => '2',
+                    'maxlength' => '180',
+                ],
+                'label' => 'Adresse mail',
+                'label_attr' => [
+                    'class' => 'form-label'
+                ],
+                'constraints' => [
+                    new Assert\NotBlank(),
+                    new Assert\Email(),
+                    new Assert\Length(['min' => 2, 'max' => 180])
+                ],
+            ])
+            ->add('subject', TextType::class, [
+                'attr' => [
+                    'class' => 'form-control',
+                    'minlength' => '2',
+                    'maxlength' => '100',
+                ],
+                    'label' => 'Objet',
+                    'label_attr' => [
+                'class' => 'form-label'
+                ],
+                'constraints' => [
+                    new Assert\Length(['min' => 2, 'max' => 100])
+                ],
+            ])
+            ->add('message', TextAreaType::class, [
+                'attr' => [
+                    'class' => 'form-control',
+                ],
+                'label' => 'Description',
+                'label_attr' => [
+                    'class' => 'form-label'
+                ],
+                'constraints' => [
+                    new Assert\NotBlank(),
+                    new Assert\Email(),
+                    new Assert\Length(['min' => 2, 'max' => 180])
+                ],
+            ])
+            ->add('submit', SubmitType::class, [
+                'attr' => [
+                    'class' => 'btn btn-primary mt-4'
+                ],
+                'label' => 'Soumettre ma demande'
+            ]);
+    }
+
+    public function configureOptions(OptionsResolver $resolver): void
+    {
+        $resolver->setDefaults([
+            'data_class' => Contact::class,
+        ]);
+    }
+}
Index: src/Controller/AboutController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Controller/AboutController.php b/src/Controller/AboutController.php
new file mode 100644
--- /dev/null	(date 1677064444695)
+++ b/src/Controller/AboutController.php	(date 1677064444695)
@@ -0,0 +1,16 @@
+<?php
+
+namespace App\Controller;
+
+
+use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
+use Symfony\Component\Routing\Annotation\Route;
+use Symfony\Component\HttpFoundation\Response;
+
+class AboutController extends AbstractController {
+    #[Route('/about', 'app_about', methods: ['GET'])]
+    public function index() : Response {
+        return $this->render('about.html.twig');
+    }
+
+}
\ No newline at end of file
Index: src/Controller/ContactController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Controller/ContactController.php b/src/Controller/ContactController.php
new file mode 100644
--- /dev/null	(date 1677064444695)
+++ b/src/Controller/ContactController.php	(date 1677064444695)
@@ -0,0 +1,31 @@
+<?php
+
+namespace App\Controller;
+
+
+use App\Entity\Contact;
+use App\Form\ContactType;
+use App\Form\FormHandler\ContactFormHandler;
+use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\Routing\Annotation\Route;
+use Symfony\Component\HttpFoundation\Response;
+
+class ContactController extends AbstractController {
+    #[Route('/contact', 'app_contact', methods: ['GET', 'POST'])]
+    public function contact(Request $request, ContactFormHandler $contactFormHandler) : Response
+    {
+        $contact = new Contact();
+
+        $form = $this->createForm(ContactType::class, $contact);
+
+        $form->handleRequest($request);
+
+        if ($form->isSubmitted() && $form->isValid()) {
+            $contactFormHandler->handleForm($contact);
+        }
+        return $this->render('contact.html.twig', [
+            'form' => $form->createView(),
+        ]);
+    }
+}
\ No newline at end of file
Index: public/index.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nuse App\\Kernel;\r\n\r\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\r\n\r\nreturn function (array $context) {\r\n    return new Kernel($context['APP_ENV'], (bool) $context['APP_DEBUG']);\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/public/index.php b/public/index.php
--- a/public/index.php	(revision bdbbc1defa307700f62f43809f18497082c2034f)
+++ b/public/index.php	(date 1677078312596)
@@ -5,5 +5,6 @@
 require_once dirname(__DIR__).'/vendor/autoload_runtime.php';
 
 return function (array $context) {
+
     return new Kernel($context['APP_ENV'], (bool) $context['APP_DEBUG']);
 };
diff --git a/src/Controller/ProducersController.php b/src/Controller/ProducersController.php
new file mode 100644
